/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main/FreeWriteManager.ts":
/*!**************************************!*\
  !*** ./src/main/FreeWriteManager.ts ***!
  \**************************************/
/*! exports provided: FreeWriteManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FreeWriteManager\", function() { return FreeWriteManager; });\n/* harmony import */ var _GoSetting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoSetting */ \"./src/main/GoSetting.ts\");\n\r\nvar FreeWriteManager = /** @class */ (function () {\r\n    /**\r\n     * このクラスが扱うコンテキストと幅(縦も同義)を注入する\r\n     * @param canvas\r\n     * @param goSetting\r\n     * @param roCount\r\n     * @param logger\r\n     */\r\n    function FreeWriteManager(canvas, goSetting, roCount) {\r\n        // 描画中かどうか\r\n        this.isDrawing = false;\r\n        this.goBoadInfo = new _GoSetting__WEBPACK_IMPORTED_MODULE_0__[\"GoBoadInfo\"](goSetting.roHW, goSetting.roHW, goSetting.gobanLeft, goSetting.gobanTop, roCount);\r\n        //カンバスが使用できるかチェック\r\n        if (!canvas.getContext) {\r\n            console.log('[Roulette.constructor] カンバスが使用できません');\r\n            return;\r\n        }\r\n        //カンバス・コンテキスト・大きさを注入する\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext(\"2d\");\r\n        //クラスを通して変わらないカンバス設定\r\n        this.context.font = \"bold 15px '游ゴシック'\";\r\n        this.context.textAlign = 'center';\r\n        this.context.shadowBlur = 2;\r\n        this.initCanvas(this.canvas, this.goBoadInfo);\r\n    }\r\n    /**\r\n * 碁盤を描画します。\r\n * @param shadow 影の長さ（高さ/2）\r\n * @param context 描画先のコンテキストを指定します。\r\n * @since 0.1\r\n */\r\n    FreeWriteManager.prototype.initCanvas = function (canvas, goBoadInfo) {\r\n        // サイズ変更(サイズ変更すると描画内容が消えるので先に変更)\r\n        canvas.width = goBoadInfo.width + 40;\r\n        canvas.height = goBoadInfo.height + 40;\r\n        console.log(\"initCanvas:\", canvas.width, canvas.height);\r\n    };\r\n    FreeWriteManager.prototype.clearAll = function () {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    };\r\n    FreeWriteManager.prototype.start = function () {\r\n        this.isDrawing = true;\r\n    };\r\n    FreeWriteManager.prototype.stop = function () {\r\n        this.isDrawing = false;\r\n    };\r\n    FreeWriteManager.prototype.draw = function (mouseX, mouseY) {\r\n        if (this.isDrawing) {\r\n            // console.info(\"position=\" + mouseX + \":\" + mouseY);\r\n            var top_1 = this.goBoadInfo.top;\r\n            var left = this.goBoadInfo.left;\r\n            this.context.beginPath();\r\n            this.context.arc(mouseX, mouseY, 2, 0, 2 * Math.PI);\r\n            this.context.fillStyle = \"black\";\r\n            // 透明度\r\n            // this.context.globalAlpha = 1;\r\n            this.context.closePath();\r\n            this.context.fill();\r\n        }\r\n    };\r\n    return FreeWriteManager;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/main/FreeWriteManager.ts?");

/***/ }),

/***/ "./src/main/GoBoardMagnager.ts":
/*!*************************************!*\
  !*** ./src/main/GoBoardMagnager.ts ***!
  \*************************************/
/*! exports provided: GoBoadManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoBoadManager\", function() { return GoBoadManager; });\n/* harmony import */ var _GoSetting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoSetting */ \"./src/main/GoSetting.ts\");\n\r\nvar GoBoadManager = /** @class */ (function () {\r\n    /**\r\n     * このクラスが扱うコンテキストと幅(縦も同義)を注入する\r\n     * @param canvas\r\n     * @param goSetting\r\n     * @param ro\r\n     */\r\n    function GoBoadManager(canvas, goSetting, ro) {\r\n        var goBoadInfo = new _GoSetting__WEBPACK_IMPORTED_MODULE_0__[\"GoBoadInfo\"](goSetting.roHW, goSetting.roHW, goSetting.gobanLeft, goSetting.gobanTop, ro);\r\n        //カンバスが使用できるかチェック\r\n        if (!canvas.getContext) {\r\n            console.log('[Roulette.constructor] カンバスが使用できません');\r\n            // this.roCount = 0;\r\n            return;\r\n        }\r\n        //カンバス・コンテキスト・大きさを注入する\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext('2d');\r\n        //クラスを通して変わらないカンバス設定\r\n        this.context.font = \"bold 15px '游ゴシック'\";\r\n        this.context.textAlign = 'center';\r\n        this.context.shadowBlur = 2;\r\n        this.drawBoard(5, this.canvas, this.context, goBoadInfo);\r\n    }\r\n    /**\r\n     * 碁盤を描画します。\r\n     * @param shadow 影の長さ（高さ/2）\r\n     * @param context 描画先のコンテキストを指定します。\r\n     * @since 0.1\r\n     */\r\n    GoBoadManager.prototype.drawBoard = function (shadow, canvas, context, goBoadInfo) {\r\n        // canvasのサイズ変更(サイズ変更すると描画内容が消えるので先に変更)\r\n        canvas.width = goBoadInfo.width + 20;\r\n        canvas.height = goBoadInfo.height + 20;\r\n        // console.log(\"canvas:\", canvas.width, canvas.height);\r\n        // 碁盤の影\r\n        this.drowShadow(this.context, goBoadInfo.left, goBoadInfo.top, goBoadInfo.width, shadow, goBoadInfo.height);\r\n        // 碁盤\r\n        this.drowGoban(this.context, goBoadInfo.left, goBoadInfo.top, goBoadInfo.width, goBoadInfo.height);\r\n        // 木目\r\n        // drawWood(x, y, width, height, context);\r\n        // 格子\r\n        this.drowKoushi(this.context, goBoadInfo, goBoadInfo.areaLeft, goBoadInfo.roWidth, goBoadInfo.areaWidth, goBoadInfo.roHeight, goBoadInfo.areaHeight);\r\n    };\r\n    GoBoadManager.prototype.drowKoushi = function (context, goBoadInfo, gx, dy, gwidth, dx, gheight) {\r\n        context.fillStyle = \"black\";\r\n        var y1, lwidth;\r\n        var lineBaseWidth = goBoadInfo.keisenWidth;\r\n        // 横の格子線\r\n        var x2;\r\n        var y2 = goBoadInfo.areaTop;\r\n        var gy = goBoadInfo.areaTop;\r\n        var ro = goBoadInfo.roCount;\r\n        for (var col = 1; col <= ro; col++) {\r\n            if (col == 1)\r\n                x2 = gx + (col - 1) * dx;\r\n            else\r\n                x2 = gx + 1 + (col - 1) * dx;\r\n            if (col == 1 || col == ro) {\r\n                lwidth = lineBaseWidth * 2;\r\n            }\r\n            else {\r\n                lwidth = lineBaseWidth;\r\n            }\r\n            context.beginPath();\r\n            context.rect(x2, y2, lwidth, gheight);\r\n            context.fill();\r\n            console.log(\"格子横:\" + col, x2);\r\n        }\r\n        // （横の格子線）\r\n        var x1 = goBoadInfo.areaLeft;\r\n        for (var row = 1; row <= ro; row++) {\r\n            if (row == 1)\r\n                y1 = gy + (row - 1) * dy;\r\n            else\r\n                y1 = gy + 1 + (row - 1) * dy;\r\n            if (row == 1 || row == ro)\r\n                lwidth = 2;\r\n            else\r\n                lwidth = 1;\r\n            context.beginPath();\r\n            context.rect(x1, y1, gwidth, lwidth);\r\n            context.fill();\r\n            console.log(\"格子縦:\" + row, y1);\r\n        }\r\n        // 星の点\r\n        // drawCircle\r\n    };\r\n    GoBoadManager.prototype.drowGoban = function (context, x, y, width, height) {\r\n        context.beginPath();\r\n        context.rect(x, y, width, height);\r\n        context.fillStyle = \"burlywood\";\r\n        context.globalAlpha = 1.0;\r\n        context.fill();\r\n    };\r\n    GoBoadManager.prototype.drowShadow = function (context, left, top, width, shadow, height) {\r\n        context.beginPath();\r\n        context.moveTo(left, top);\r\n        context.lineTo(left + width, top);\r\n        context.lineTo(left + width + shadow, top + shadow);\r\n        context.lineTo(left + width + shadow, top + height + shadow);\r\n        context.lineTo(left + shadow, top + height + shadow);\r\n        context.lineTo(left, top + height);\r\n        context.closePath();\r\n        context.fillStyle = \"black\";\r\n        context.globalAlpha = 0.4;\r\n        context.fill();\r\n    };\r\n    return GoBoadManager;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/main/GoBoardMagnager.ts?");

/***/ }),

/***/ "./src/main/GoCandidateManager.ts":
/*!****************************************!*\
  !*** ./src/main/GoCandidateManager.ts ***!
  \****************************************/
/*! exports provided: GoCandidateManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoCandidateManager\", function() { return GoCandidateManager; });\n/* harmony import */ var _GoSetting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoSetting */ \"./src/main/GoSetting.ts\");\n\r\n/**\r\n * 碁石を管理するクラス\r\n */\r\nvar GoCandidateManager = /** @class */ (function () {\r\n    /**\r\n     * このクラスが扱うコンテキストと幅(縦も同義)を注入する\r\n     * @param canvas\r\n     * @param goSetting\r\n     * @param roCount\r\n     * @param logger\r\n     */\r\n    function GoCandidateManager(canvas, goSetting, roCount) {\r\n        // 候補番号(カウントアップ用)\r\n        this.candidateNumber = 0;\r\n        this.roWidth = goSetting.roHW;\r\n        this.roHeight = goSetting.roHW;\r\n        this.roCount = roCount;\r\n        this.goBoadInfo = new _GoSetting__WEBPACK_IMPORTED_MODULE_0__[\"GoBoadInfo\"](goSetting.roHW, goSetting.roHW, goSetting.gobanLeft, goSetting.gobanTop, roCount);\r\n        //カンバスが使用できるかチェック\r\n        if (!canvas.getContext) {\r\n            console.log('[Roulette.constructor] カンバスが使用できません');\r\n            this.roCount = 0;\r\n            return;\r\n        }\r\n        //カンバス・コンテキスト・大きさを注入する\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext(\"2d\");\r\n        //クラスを通して変わらないカンバス設定\r\n        this.initCanvas(this.canvas, this.goBoadInfo);\r\n    }\r\n    /**\r\n     * 碁盤上での位置左上から数えた路数\r\n     * @param x\r\n     * @param y\r\n     */\r\n    GoCandidateManager.prototype.calcPositionOnGoban = function (x, y) {\r\n        var top = this.goBoadInfo.top;\r\n        var left = this.goBoadInfo.left;\r\n        console.log(\"boad:\" + top + \":\" + left);\r\n        var x0 = x - left;\r\n        // 1区画の半分先までは、手前の路数として判断する\r\n        var xRo = Math.floor((x0 + (this.roWidth / 2)) / this.roWidth) - 1;\r\n        var y0 = y - top;\r\n        // 1区画の半分先までは、手前の路数として判断する\r\n        var yRo = Math.floor((y0 + (this.roHeight / 2)) / this.roHeight) - 1;\r\n        return new _GoSetting__WEBPACK_IMPORTED_MODULE_0__[\"PositionOnGoBoad\"](xRo, yRo);\r\n    };\r\n    /**\r\n     * 碁盤を描画します。\r\n     * @param shadow 影の長さ（高さ/2）\r\n     * @param context 描画先のコンテキストを指定します。\r\n     * @since 0.1\r\n     */\r\n    GoCandidateManager.prototype.initCanvas = function (canvas, goBoadInfo) {\r\n        // サイズ変更(サイズ変更すると描画内容が消えるので先に変更)\r\n        canvas.width = goBoadInfo.width + 20;\r\n        canvas.height = goBoadInfo.height + 20;\r\n        this.candidateNumber = 0;\r\n    };\r\n    GoCandidateManager.prototype.clearAll = function () {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.candidateNumber = 0;\r\n    };\r\n    /**\r\n     * 候補手を打つ\r\n     * @param mouseX\r\n     * @param mouseY\r\n     * @param word\r\n     */\r\n    GoCandidateManager.prototype.addCandidate = function (mouseX, mouseY) {\r\n        var positionOnGoban = this.calcPositionOnGoban(mouseX, mouseY);\r\n        var keisen = 1;\r\n        // 碁石の中心位置を計算する。\r\n        var circleCenterPosition = this.calcCircleCenterPosition(keisen, positionOnGoban);\r\n        var radius = this.goBoadInfo.roHeight * 0.475; // 半径\r\n        var caondidateWord = String(this.candidateNumber + 1);\r\n        this.drawCircle(circleCenterPosition.x, circleCenterPosition.y, radius, 0.6, this.context, \"green\");\r\n        this.drawWord(circleCenterPosition.x, circleCenterPosition.y, caondidateWord, this.context, radius);\r\n        this.candidateNumber += 1;\r\n        console.log(\"candidateNumber:\" + this.candidateNumber);\r\n    };\r\n    GoCandidateManager.prototype.clearGoishiByRo = function (positionOnGoban) {\r\n        var keisen = 1;\r\n        // 碁石の中心位置を計算する。\r\n        var circleCenterPosition = this.calcCircleCenterPosition(keisen, positionOnGoban);\r\n        this.clearGoishi(circleCenterPosition.x - (this.roWidth / 2), circleCenterPosition.y - (this.roHeight / 2), this.context);\r\n    };\r\n    GoCandidateManager.prototype.drawWord = function (x, y, word, context, maxwidth) {\r\n        context.beginPath();\r\n        context.fillStyle = \"white\";\r\n        context.font = \"20px 'ＭＳ ゴシック'\";\r\n        context.fillText(word, x - 5, y + 7, maxwidth);\r\n        context.closePath;\r\n        context.stroke();\r\n    };\r\n    GoCandidateManager.prototype.calcCircleCenterPosition = function (keisen, positionOnGoban) {\r\n        var circleX = this.goBoadInfo.areaLeft + keisen + (this.roWidth) * (positionOnGoban.roX);\r\n        // 端の線は2px(格子ごとの線+1pxなので、足りない1pxだけ足す)\r\n        var circleY = this.goBoadInfo.areaTop + keisen + (this.roHeight) * (positionOnGoban.roY);\r\n        var circleCenterPosition = new _GoSetting__WEBPACK_IMPORTED_MODULE_0__[\"PositionXY\"](circleX, circleY);\r\n        return circleCenterPosition;\r\n    };\r\n    /**\r\n     * 円形オブジェクトを消します。\r\n     * @param x 左端座標\r\n     * @param y 上端座標\r\n     * @param context 描画先のコンテキストを指定します。\r\n     * @since 0.1\r\n     */\r\n    GoCandidateManager.prototype.clearGoishi = function (x, y, context) {\r\n        context.clearRect(x, y, this.roWidth, this.roHeight);\r\n        // 透明度\r\n        console.log(\"color\", \"clear\");\r\n    };\r\n    GoCandidateManager.prototype.drawCircle = function (x, y, r, globalAlpha, context, fillStyle) {\r\n        context.beginPath();\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.globalAlpha = globalAlpha;\r\n        context.fillStyle = fillStyle;\r\n        context.fill();\r\n        // 透明度\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"white\";\r\n        context.stroke();\r\n        context.closePath();\r\n    };\r\n    return GoCandidateManager;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/main/GoCandidateManager.ts?");

/***/ }),

/***/ "./src/main/GoIshiManager.ts":
/*!***********************************!*\
  !*** ./src/main/GoIshiManager.ts ***!
  \***********************************/
/*! exports provided: GoishiManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoishiManager\", function() { return GoishiManager; });\n/* harmony import */ var _GoSetting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoSetting */ \"./src/main/GoSetting.ts\");\n\r\nvar ChakushuType;\r\n(function (ChakushuType) {\r\n    ChakushuType[\"BLACK_TURN\"] = \"B\";\r\n    ChakushuType[\"WHITE_TURN\"] = \"W\";\r\n    ChakushuType[\"OKI\"] = \"O\";\r\n    ChakushuType[\"NONE\"] = \"N\";\r\n})(ChakushuType || (ChakushuType = {}));\r\nvar GoishiColor;\r\n(function (GoishiColor) {\r\n    GoishiColor[\"BLACK\"] = \"black\";\r\n    GoishiColor[\"WHITE\"] = \"white\";\r\n    GoishiColor[\"NONE\"] = \"NONE\";\r\n})(GoishiColor || (GoishiColor = {}));\r\nvar KifuPart = /** @class */ (function () {\r\n    function KifuPart(color, roX, roY, isPassed) {\r\n        this.color = color;\r\n        this.position = new PositionOnGoBoad(roX, roY);\r\n        this.isPassed = isPassed;\r\n    }\r\n    return KifuPart;\r\n}());\r\nvar PointerPosition = /** @class */ (function () {\r\n    function PointerPosition(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    return PointerPosition;\r\n}());\r\nvar PositionOnGoBoad = /** @class */ (function () {\r\n    /**\r\n     * 路数で位置を指定\r\n     * @param roX 0～18\r\n     * @param roY 0～18\r\n     */\r\n    function PositionOnGoBoad(roX, roY) {\r\n        if (roX < 0 || roY < 0) {\r\n            throw new Error(\"ro must be greater than 0.\");\r\n        }\r\n        this.roX = roX;\r\n        this.roY = roY;\r\n    }\r\n    return PositionOnGoBoad;\r\n}());\r\n/**\r\n * 碁石を管理するクラス\r\n */\r\nvar GoishiManager = /** @class */ (function () {\r\n    /**\r\n     * このクラスが扱うコンテキストと幅(縦も同義)を注入する\r\n     * @param canvas\r\n     * @param goBoadSetting\r\n     * @param roCount\r\n     * @param logger\r\n     */\r\n    function GoishiManager(canvas, goBoadSetting, roCount) {\r\n        this.now = -1;\r\n        this.roWidth = goBoadSetting.roHW;\r\n        this.roHeight = goBoadSetting.roHW;\r\n        this._turn = ChakushuType.BLACK_TURN;\r\n        this.roCount = roCount;\r\n        this._goBoadInfo = new _GoSetting__WEBPACK_IMPORTED_MODULE_0__[\"GoBoadInfo\"](goBoadSetting.roHW, goBoadSetting.roHW, goBoadSetting.gobanLeft, goBoadSetting.gobanTop, roCount);\r\n        this.kifu = new Array();\r\n        //カンバスが使用できるかチェック\r\n        if (!canvas.getContext) {\r\n            console.log('[Roulette.constructor] カンバスが使用できません');\r\n            this.roCount = 0;\r\n            this.realtimePosition = new Array();\r\n            return;\r\n        }\r\n        //カンバス・コンテキスト・大きさを注入する\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext(\"2d\");\r\n        // 現在地の初期化\r\n        this.realtimePosition = new Array();\r\n        for (var i = 0; i < roCount; i++) {\r\n            this.realtimePosition[i] = new Array(); // （2）\r\n            for (var j = 0; j < roCount; j++) {\r\n                this.realtimePosition[i][j] = ChakushuType.NONE; // （3）\r\n            }\r\n        }\r\n        //クラスを通して変わらないカンバス設定\r\n        this.context.font = \"bold 15px '游ゴシック'\";\r\n        this.context.textAlign = 'center';\r\n        this.context.shadowBlur = 2;\r\n        this.initCanvas(this.canvas, this._goBoadInfo);\r\n    }\r\n    Object.defineProperty(GoishiManager.prototype, \"turn\", {\r\n        get: function () {\r\n            return this._turn;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    GoishiManager.prototype.viewFromKifu = function (kifuString) {\r\n        var kifuList = KifuUtil.convertFromString(kifuString);\r\n        var positions = new Array();\r\n        for (var i = 0; i < this.roCount; i++) {\r\n            positions[i] = new Array();\r\n            for (var j = 0; j < this.roCount; j++) {\r\n                positions[i][j] = ChakushuType.NONE;\r\n            }\r\n        }\r\n        for (var index = 0; index < kifuList.length; index++) {\r\n            var element = this.kifu[index];\r\n            var x = element.position.roX;\r\n            var y = element.position.roY;\r\n            positions[x][y] = element.color;\r\n        }\r\n        this.viewFromPosition(positions);\r\n    };\r\n    /**\r\n     * 棋譜の内容をそのまま表示する。\r\n     */\r\n    GoishiManager.prototype.viewFromPosition = function (realtimePosition) {\r\n        this.clearAll();\r\n        for (var x = 0; x < realtimePosition.length; x++) {\r\n            var col = realtimePosition[x];\r\n            for (var y = 0; y < col.length; y++) {\r\n                var color = realtimePosition[x][y];\r\n                var kifuPart = new KifuPart(color, x, y, false);\r\n                if (kifuPart.color == ChakushuType.NONE) {\r\n                    // 何もしない\r\n                }\r\n                else {\r\n                    this.addGoishi(kifuPart);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * 碁盤上での位置左上から数えた路数\r\n     * @param x\r\n     * @param y\r\n     */\r\n    GoishiManager.prototype.calcPositionOnGoban = function (position, goBoadInfo) {\r\n        var top = goBoadInfo.top;\r\n        var left = goBoadInfo.left;\r\n        console.log(\"boad:\" + top + \":\" + left);\r\n        var x0 = position.x - left;\r\n        // 1区画の半分先までは、手前の路数として判断する\r\n        var xRo = Math.floor((x0 + (goBoadInfo.roHeight / 2)) / goBoadInfo.roWidth) - 1;\r\n        var y0 = position.y - top;\r\n        // 1区画の半分先までは、手前の路数として判断する\r\n        var yRo = Math.floor((y0 + (goBoadInfo.roHeight / 2)) / goBoadInfo.roHeight) - 1;\r\n        // console.info(\"ro=\" + xRo + \":\" + yRo);\r\n        return new PositionOnGoBoad(xRo, yRo);\r\n    };\r\n    /**\r\n     * 碁盤を描画します。\r\n     * @param shadow 影の長さ（高さ/2）\r\n     * @param context 描画先のコンテキストを指定します。\r\n     * @since 0.1\r\n     */\r\n    GoishiManager.prototype.initCanvas = function (canvas, goBoadInfo) {\r\n        // サイズ変更(サイズ変更すると描画内容が消えるので先に変更)\r\n        canvas.width = goBoadInfo.width + 20;\r\n        canvas.height = goBoadInfo.height + 20;\r\n        // console.log(\"initCanvas:\", canvas.width, canvas.height);\r\n    };\r\n    GoishiManager.prototype.clearAll = function () {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    };\r\n    /**\r\n     * 指定した座標に石を描画する。\r\n     * @param mouseX\r\n     * @param mouseY\r\n     * @param color\r\n     */\r\n    GoishiManager.prototype.drawGoIshiByPosition = function (position, color) {\r\n        var positionOnGoban = this.calcPositionOnGoban(position, this._goBoadInfo);\r\n        var circleCenterPosition = this.calcCircleCenterPosition(this._goBoadInfo, positionOnGoban);\r\n        var fillstyle = color;\r\n        var radius = this._goBoadInfo.roHeight * 0.475; // 半径\r\n        this.drawFillCircle(circleCenterPosition.x, circleCenterPosition.y, radius, this.context, fillstyle);\r\n        return positionOnGoban;\r\n    };\r\n    GoishiManager.prototype.isDuplicatePosition = function (mouseX, mouseY, goBoadInfo) {\r\n        var positionOnGoban = this.calcPositionOnGoban(new PointerPosition(mouseX, mouseY), goBoadInfo);\r\n        if (this.realtimePosition[positionOnGoban.roX][positionOnGoban.roY] != ChakushuType.NONE) {\r\n            console.log(\"既に石がある。\");\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    GoishiManager.prototype.addHandicapStone = function (mouseX, mouseY) {\r\n        console.info(\"click=\" + mouseX + \":\" + mouseY);\r\n        if (this.isDuplicatePosition(mouseX, mouseY, this._goBoadInfo)) {\r\n            return;\r\n        }\r\n        var positionOnBoad = this.drawGoIshiByPosition(new PointerPosition(mouseX, mouseY), GoishiColor.BLACK);\r\n        // 棋譜の設定\r\n        this.kifu.push(new KifuPart(ChakushuType.BLACK_TURN, positionOnBoad.roX, positionOnBoad.roY, false));\r\n        // 次を白番にする\r\n        this._turn = ChakushuType.WHITE_TURN;\r\n        this.now += 1;\r\n    };\r\n    Object.defineProperty(GoishiManager.prototype, \"kifuString\", {\r\n        get: function () {\r\n            var tmp = \"\";\r\n            this.kifu.forEach(function (kifu) {\r\n                tmp += kifu.color + \"(\" + kifu.position.roX + \":\" + kifu.position.roY + \")\";\r\n            });\r\n            return tmp;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * 待った\r\n     */\r\n    GoishiManager.prototype.chakushBack = function () {\r\n        // const now = this.kifu.length - 1;\r\n        var targetNo = this.now;\r\n        var targetChakushu = this.kifu[targetNo];\r\n        // 消す対象を次の手番として設定する。\r\n        this._turn = targetChakushu.color;\r\n        this.now = targetNo - 1;\r\n        this.clearGoishiByRo(targetChakushu.position);\r\n    };\r\n    GoishiManager.prototype.clearGoishiByRo = function (positionOnGoban) {\r\n        // 碁石の中心位置を計算する。\r\n        var circleCenterPosition = this.calcCircleCenterPosition(this._goBoadInfo, positionOnGoban);\r\n        this.clearGoishi(circleCenterPosition.x - (this.roWidth / 2), circleCenterPosition.y - (this.roHeight / 2), this.context);\r\n    };\r\n    GoishiManager.prototype.addGoishi = function (kifuPart) {\r\n        // 碁石の中心位置を計算する。\r\n        var circleCenterPosition = this.calcCircleCenterPosition(this._goBoadInfo, kifuPart.position);\r\n        this.drawGoishi(kifuPart.color, circleCenterPosition, kifuPart.position);\r\n    };\r\n    /**\r\n     * 着手動作\r\n     * @param mouseX\r\n     * @param mouseY\r\n     */\r\n    GoishiManager.prototype.chakushu = function (mouseX, mouseY) {\r\n        console.info(\"click position=\" + mouseX + \":\" + mouseY);\r\n        var nowTurn = this._turn;\r\n        var positionOnGoBoad = this.calcPositionOnGoban(new PointerPosition(mouseX, mouseY), this._goBoadInfo);\r\n        var keisen = 1;\r\n        // 碁石の中心位置を計算する。\r\n        var circleCenterPosition = this.calcCircleCenterPosition(this._goBoadInfo, positionOnGoBoad);\r\n        // console.info(\"circle=\" + circleCenterPosition.x + \":\" + circleCenterPosition.y);\r\n        // console.info(\"positionOnGoBoad=\" + positionOnGoBoad.roX + \":\" + positionOnGoBoad.roY);\r\n        if (this.realtimePosition[positionOnGoBoad.roX][positionOnGoBoad.roY] != ChakushuType.NONE) {\r\n            console.log(\"既に石がある。\");\r\n            this.clearGoishi(circleCenterPosition.x - (this.roWidth / 2), circleCenterPosition.y - (this.roHeight / 2), this.context);\r\n            this.realtimePosition[positionOnGoBoad.roX][positionOnGoBoad.roY] = ChakushuType.NONE;\r\n            return;\r\n        }\r\n        var tmp = this.drawGoishi(nowTurn, circleCenterPosition, positionOnGoBoad);\r\n        // ターンを入れ替える\r\n        this._turn = (nowTurn == ChakushuType.BLACK_TURN) ? ChakushuType.WHITE_TURN : ChakushuType.BLACK_TURN;\r\n        this.now += 1;\r\n        // auClick.play();\r\n        // turn = 3 - turn;\r\n    };\r\n    GoishiManager.prototype.drawGoishi = function (nowTurn, circleCenterPosition, positionOnGoban) {\r\n        var fillstyle = (nowTurn == ChakushuType.BLACK_TURN) ? \"black\" : \"white\";\r\n        var radius = this._goBoadInfo.roHeight * 0.475; // 半径\r\n        this.drawFillCircle(circleCenterPosition.x, circleCenterPosition.y, radius, this.context, fillstyle);\r\n        // 棋譜の設定\r\n        this.kifu.push(new KifuPart(nowTurn, positionOnGoban.roX, positionOnGoban.roY, false));\r\n        // 配置の設定\r\n        this.realtimePosition[positionOnGoban.roX][positionOnGoban.roY] = nowTurn;\r\n    };\r\n    GoishiManager.prototype.calcCircleCenterPosition = function (goBoadInfo, positionOnGoban) {\r\n        var circleX = goBoadInfo.areaLeft + goBoadInfo.keisenWidth + (this.roWidth) * (positionOnGoban.roX);\r\n        // 端の線は2px(格子ごとの線+1pxなので、足りない1pxだけ足す)\r\n        var circleY = goBoadInfo.areaTop + goBoadInfo.keisenWidth + (this.roHeight) * (positionOnGoban.roY);\r\n        var circleCenterPosition = new PointerPosition(circleX, circleY);\r\n        return circleCenterPosition;\r\n    };\r\n    /**\r\n     * 円形オブジェクトを消します。\r\n     * @param x 左端座標\r\n     * @param y 上端座標\r\n     * @param context 描画先のコンテキストを指定します。\r\n     * @since 0.1\r\n     */\r\n    GoishiManager.prototype.clearGoishi = function (x, y, context) {\r\n        context.clearRect(x, y, this.roWidth, this.roHeight);\r\n        // 透明度\r\n        console.log(\"color\", \"clear\");\r\n    };\r\n    /**\r\n     * 円形オブジェクトを描画します。\r\n     * @param x 左端座標\r\n     * @param y 上端座標\r\n     * @param r 半径\r\n     * @param context 描画先のコンテキストを指定します。\r\n     * @since 0.1\r\n     */\r\n    GoishiManager.prototype.drawFillCircle = function (x, y, r, context, fillStyle) {\r\n        context.beginPath();\r\n        // context.arc(x + r, y + r, r, 0, 2 * Math.PI);\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.fillStyle = fillStyle;\r\n        // 透明度\r\n        context.globalAlpha = 1;\r\n        context.fill();\r\n        // テカリ\r\n        context.beginPath();\r\n        context.arc(x, y, r * 0.8, 0, -0.25 * Math.PI, true);\r\n        context.closePath;\r\n        context.strokeStyle = (fillStyle == \"black\") ? \"white\" : \"black\";\r\n        context.lineCap = \"round\";\r\n        context.lineWidth = 0.5;\r\n        context.stroke();\r\n        console.log(\"color\", fillStyle);\r\n    };\r\n    GoishiManager.prototype.drawCircle = function (x, y, r, globalAlpha, context, fillStyle) {\r\n        context.beginPath();\r\n        context.arc(x, y, r, 0, 2 * Math.PI);\r\n        context.globalAlpha = globalAlpha;\r\n        context.fillStyle = fillStyle;\r\n        context.fill();\r\n        // 透明度\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = \"white\";\r\n        context.stroke();\r\n        context.closePath();\r\n    };\r\n    return GoishiManager;\r\n}());\r\n\r\nvar KifuUtil = /** @class */ (function () {\r\n    function KifuUtil() {\r\n    }\r\n    KifuUtil.convertFromString = function (value) {\r\n        // TODO:実装する\r\n        return new Array();\r\n    };\r\n    /**\r\n     * TODO 実装する\r\n     * @param kifuList\r\n     */\r\n    KifuUtil.convertToString = function (kifuList) {\r\n        return \"\";\r\n    };\r\n    return KifuUtil;\r\n}());\r\nvar GoishiUtil = /** @class */ (function () {\r\n    function GoishiUtil() {\r\n    }\r\n    GoishiUtil.convertColor = function (chakushu) {\r\n        if (chakushu == ChakushuType.BLACK_TURN) {\r\n            return GoishiColor.BLACK;\r\n        }\r\n        if (chakushu == ChakushuType.WHITE_TURN) {\r\n            return GoishiColor.WHITE;\r\n        }\r\n        if (chakushu == ChakushuType.OKI) {\r\n            return GoishiColor.BLACK;\r\n        }\r\n        return GoishiColor.NONE;\r\n    };\r\n    return GoishiUtil;\r\n}());\r\n\n\n//# sourceURL=webpack:///./src/main/GoIshiManager.ts?");

/***/ }),

/***/ "./src/main/GoLogger.ts":
/*!******************************!*\
  !*** ./src/main/GoLogger.ts ***!
  \******************************/
/*! exports provided: GoLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoLogger\", function() { return GoLogger; });\nvar GoLogger = /** @class */ (function () {\r\n    function GoLogger(target) {\r\n        // do something construct...\r\n        this.target = target;\r\n    }\r\n    GoLogger.getInstance = function (target) {\r\n        if (!GoLogger.instance) {\r\n            GoLogger.instance = new GoLogger(target);\r\n            // ... any one time initialization goes here ...\r\n        }\r\n        return GoLogger.instance;\r\n    };\r\n    GoLogger.prototype.log = function (value) {\r\n        if (this.target instanceof HTMLInputElement) {\r\n            var t = this.target;\r\n            t.value = value;\r\n            return;\r\n        }\r\n        if (this.target instanceof HTMLLabelElement) {\r\n            var t = this.target;\r\n            t.innerHTML = value;\r\n            return;\r\n        }\r\n        throw new Error(\"this element isn't the target　types.\");\r\n    };\r\n    return GoLogger;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/main/GoLogger.ts?");

/***/ }),

/***/ "./src/main/GoSetting.ts":
/*!*******************************!*\
  !*** ./src/main/GoSetting.ts ***!
  \*******************************/
/*! exports provided: GoBoadSetting, GoBoadInfo, GoMoveType, KifuPart, PositionXY, PositionOnGoBoad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoBoadSetting\", function() { return GoBoadSetting; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoBoadInfo\", function() { return GoBoadInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GoMoveType\", function() { return GoMoveType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KifuPart\", function() { return KifuPart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PositionXY\", function() { return PositionXY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PositionOnGoBoad\", function() { return PositionOnGoBoad; });\nvar GoBoadSetting = /** @class */ (function () {\r\n    function GoBoadSetting(gobanTop, gobanLeft, goishiGlobalAlpha, roHW) {\r\n        this.goishiGlobalAlpha = goishiGlobalAlpha;\r\n        this.gobanTop = gobanTop;\r\n        this.gobanLeft = gobanLeft;\r\n        this.roHW = roHW;\r\n    }\r\n    return GoBoadSetting;\r\n}());\r\n\r\nvar GoBoadInfo = /** @class */ (function () {\r\n    /**\r\n     * 碁盤の構成情報\r\n     * @param roWidth\r\n     * @param roHeight\r\n     * @param left\r\n     * @param top\r\n     * @param roCount\r\n     */\r\n    function GoBoadInfo(roWidth, roHeight, left, top, roCount, keisenWidth) {\r\n        if (keisenWidth === void 0) { keisenWidth = 1; }\r\n        this.roWidth = roWidth;\r\n        this.roHeight = roHeight;\r\n        this.roCount = roCount;\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = this.roWidth * (this.roCount + 1);\r\n        this.height = this.roHeight * (this.roCount + 1);\r\n        this.areaWidth = this.roWidth * (this.roCount - 1) + 2;\r\n        this.areaHeight = this.roHeight * (this.roCount - 1) + 2;\r\n        this.areaLeft = left + Math.floor((this.width - this.areaWidth) / 2);\r\n        this.areaTop = top + Math.floor((this.height - this.areaHeight) / 2);\r\n        this.keisenWidth = keisenWidth;\r\n    }\r\n    return GoBoadInfo;\r\n}());\r\n\r\nvar GoMoveType;\r\n(function (GoMoveType) {\r\n    GoMoveType[\"BLACK\"] = \"B\";\r\n    GoMoveType[\"WHITE\"] = \"W\";\r\n    GoMoveType[\"OKI\"] = \"AB\";\r\n    GoMoveType[\"OKI_WHITE\"] = \"AE\";\r\n    GoMoveType[\"NONE\"] = \"NONE\";\r\n})(GoMoveType || (GoMoveType = {}));\r\nvar KifuPart = /** @class */ (function () {\r\n    function KifuPart(color, roX, roY, isPassed) {\r\n        if (isPassed === void 0) { isPassed = false; }\r\n        this.color = color;\r\n        this.position = new PositionOnGoBoad(roX, roY);\r\n        this.isPassed = isPassed;\r\n    }\r\n    return KifuPart;\r\n}());\r\n\r\nvar PositionXY = /** @class */ (function () {\r\n    function PositionXY(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    return PositionXY;\r\n}());\r\n\r\nvar PositionOnGoBoad = /** @class */ (function () {\r\n    /**\r\n     * 路数で位置を指定\r\n     * @param roX 0～18\r\n     * @param roY 0～18\r\n     */\r\n    function PositionOnGoBoad(roX, roY) {\r\n        if (roX < 0 || roY < 0) {\r\n            throw new Error(\"ro must be greater than 0.\");\r\n        }\r\n        this.roX = roX;\r\n        this.roY = roY;\r\n    }\r\n    return PositionOnGoBoad;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/main/GoSetting.ts?");

/***/ }),

/***/ "./src/main/index.ts":
/*!***************************!*\
  !*** ./src/main/index.ts ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _GoBoardMagnager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoBoardMagnager */ \"./src/main/GoBoardMagnager.ts\");\n/* harmony import */ var _FreeWriteManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FreeWriteManager */ \"./src/main/FreeWriteManager.ts\");\n/* harmony import */ var _GoIshiManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GoIshiManager */ \"./src/main/GoIshiManager.ts\");\n/* harmony import */ var _GoCandidateManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GoCandidateManager */ \"./src/main/GoCandidateManager.ts\");\n/* harmony import */ var _GoSetting__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GoSetting */ \"./src/main/GoSetting.ts\");\n/* harmony import */ var _GoLogger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GoLogger */ \"./src/main/GoLogger.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * (Required feature)\r\n * ・View sample of two-eyed shape\r\n */\r\nvar Main = /** @class */ (function () {\r\n    /**\r\n     * メイン処理をここに書く\r\n     */\r\n    function Main() {\r\n        var _this = this;\r\n        this.setting = new _GoSetting__WEBPACK_IMPORTED_MODULE_4__[\"GoBoadSetting\"](0.9, 20, 20, 36);\r\n        this.canvas = document.getElementById(\"main_canvas\");\r\n        this.canvasIshi = document.getElementById(\"sub_canvas\");\r\n        this.canvasFree = document.getElementById(\"free_canvas\");\r\n        this.canvasCandidate = document.getElementById(\"candidate_canvas\");\r\n        this.lblLog = document.getElementById(\"log\");\r\n        this.inpKifu = document.getElementById(\"kifu\");\r\n        this.ckDrawMode = document.getElementById(\"ckDrawMode\");\r\n        this.ckOnHandiCapStoneMode = document.getElementById(\"ckOkiishiMode\");\r\n        this.ckCandidateMode = document.getElementById(\"ckCandidateMode\");\r\n        this.slRosu = document.getElementById(\"sl_rosu\");\r\n        this.btnNew = document.getElementById(\"btn_new\");\r\n        this.btnReadKifu = document.getElementById(\"btn_read_kifu\");\r\n        this.kifuLogger = _GoLogger__WEBPACK_IMPORTED_MODULE_5__[\"GoLogger\"].getInstance(this.inpKifu);\r\n        this.gbm = new _GoBoardMagnager__WEBPACK_IMPORTED_MODULE_0__[\"GoBoadManager\"](this.canvas, this.setting, 9);\r\n        this.gim = new _GoIshiManager__WEBPACK_IMPORTED_MODULE_2__[\"GoishiManager\"](this.canvasIshi, this.setting, 9);\r\n        this.gcm = new _GoCandidateManager__WEBPACK_IMPORTED_MODULE_3__[\"GoCandidateManager\"](this.canvasCandidate, this.setting, 9);\r\n        this.fwm = new _FreeWriteManager__WEBPACK_IMPORTED_MODULE_1__[\"FreeWriteManager\"](this.canvasFree, this.setting, 9);\r\n        // クリックイベント\r\n        this.canvasFree.addEventListener(\"click\", function (e) { return _this.onMouseClick(e); });\r\n        // お絵描きモード用イベント\r\n        this.canvasFree.addEventListener(\"mousedown\", function (e) { return _this.onMouseDown(e); });\r\n        this.canvasFree.addEventListener(\"mouseup\", function (e) { return _this.onMouseUp(e); });\r\n        this.canvasFree.addEventListener(\"mousemove\", function (e) { return _this.onMouseMove(e); });\r\n        this.ckDrawMode.addEventListener(\"change\", function (e) { return _this.fwm.clearAll(); });\r\n        // 候補モード用イベント\r\n        this.ckCandidateMode.addEventListener(\"change\", function (e) { return _this.gcm.clearAll(); });\r\n        // 新規開始用イベント\r\n        this.btnNew.addEventListener(\"click\", function (e) { return _this.new(e); });\r\n        // 棋譜読み込み\r\n        this.btnReadKifu.addEventListener(\"click\", function (e) { return _this.readKifu(e); });\r\n        // 待った\r\n        var btnBack = document.getElementById(\"btn_back\");\r\n        btnBack.addEventListener(\"click\", function (e) { return _this.mattta(e); });\r\n    }\r\n    Main.prototype.onMouseMove = function (e) {\r\n        if (this.ckDrawMode.checked) {\r\n            this.fwm.draw(e.offsetX, e.offsetY);\r\n        }\r\n    };\r\n    Main.prototype.onMouseDown = function (e) {\r\n        if (this.ckDrawMode.checked) {\r\n            this.fwm.start();\r\n        }\r\n    };\r\n    Main.prototype.onMouseUp = function (e) {\r\n        if (this.ckDrawMode.checked) {\r\n            this.fwm.stop();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param e\r\n     */\r\n    Main.prototype.onMouseClick = function (e) {\r\n        if (this.ckDrawMode.checked) {\r\n            // 描画モードの場合\r\n            return;\r\n        }\r\n        if (this.ckOnHandiCapStoneMode.checked) {\r\n            this.gim.addHandicapStone(e.offsetX, e.offsetY);\r\n            this.kifuLogger.log(this.gim.kifuString);\r\n            return;\r\n        }\r\n        if (this.ckCandidateMode.checked) {\r\n            this.gcm.addCandidate(e.offsetX, e.offsetY);\r\n            return;\r\n        }\r\n        this.gim.chakushu(e.offsetX, e.offsetY);\r\n        this.kifuLogger.log(this.gim.kifuString);\r\n        var spnTeban = document.getElementById(\"spnTeban\");\r\n        spnTeban.innerHTML = this.gim.turn;\r\n    };\r\n    /**\r\n     * 新規表示\r\n     * @param e\r\n     */\r\n    Main.prototype.new = function (e) {\r\n        var rosu = parseInt(this.slRosu.options[this.slRosu.selectedIndex].value, 10);\r\n        this.gbm = new _GoBoardMagnager__WEBPACK_IMPORTED_MODULE_0__[\"GoBoadManager\"](this.canvas, this.setting, rosu);\r\n        this.gim = new _GoIshiManager__WEBPACK_IMPORTED_MODULE_2__[\"GoishiManager\"](this.canvasIshi, this.setting, rosu);\r\n        this.gcm = new _GoCandidateManager__WEBPACK_IMPORTED_MODULE_3__[\"GoCandidateManager\"](this.canvasFree, this.setting, rosu);\r\n        this.fwm = new _FreeWriteManager__WEBPACK_IMPORTED_MODULE_1__[\"FreeWriteManager\"](this.canvasFree, this.setting, rosu);\r\n    };\r\n    Main.prototype.mattta = function (e) {\r\n        this.gim.chakushBack();\r\n    };\r\n    Main.prototype.readKifu = function (e) {\r\n        this.gim.viewFromKifu(this.inpKifu.value);\r\n    };\r\n    return Main;\r\n}());\r\n// Mainクラスを実行する。\r\nwindow.addEventListener(\"load\", function () { return new Main(); });\r\n\n\n//# sourceURL=webpack:///./src/main/index.ts?");

/***/ })

/******/ });